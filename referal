<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Реферальная программа</title>
    <style>
        :root {
            --primary-color: #8A2BE2;
            --secondary-color: #BA55D3;
            --danger-color: #ff4444;
            --success-color: #4CAF50;
            --warning-color: #FFA500;
            --text-color: #333;
            --dark-bg: #1a0633;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            -webkit-tap-highlight-color: transparent;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0;
            padding: 0;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            background: var(--primary-color);
            color: var(--text-color);
            line-height: 1.5;
        }

        .container {
            width: 100%;
            max-width: 500px;
            padding: 20px;
        }

        .card {
            background: white;
            border-radius: 16px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            padding: 24px;
            margin-bottom: 20px;
        }

        h1, h2, h3 {
            color: var(--primary-color);
            text-align: center;
            margin-bottom: 20px;
        }

        .referral-header {
            text-align: center;
            margin-bottom: 20px;
        }

        .referral-header h2 {
            color: var(--primary-color);
            margin-bottom: 10px;
        }

        .referral-header p {
            color: #666;
        }

        .referral-stats {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
            margin-bottom: 20px;
        }

        .stat-card {
            background: #f9f9f9;
            border-radius: 10px;
            padding: 15px;
            text-align: center;
        }

        .stat-card .stat-value {
            font-size: 24px;
            font-weight: bold;
            color: var(--primary-color);
            margin: 5px 0;
        }

        .stat-card .stat-label {
            font-size: 14px;
            color: #666;
        }

        .referral-link-container {
            background: rgba(138, 43, 226, 0.1);
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 20px;
            text-align: center;
        }

        .referral-link {
            font-weight: bold;
            word-break: break-all;
            margin: 10px 0;
            color: var(--primary-color);
            font-size: 16px;
        }

        .copy-btn {
            background: var(--primary-color);
            color: white;
            border: none;
            border-radius: 6px;
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
            margin-top: 10px;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            transition: background 0.3s;
        }

        .copy-btn:hover {
            background: var(--secondary-color);
        }

        .copy-btn svg {
            width: 16px;
            height: 16px;
            fill: white;
        }

        .bonus-info {
            font-size: 14px;
            color: #666;
            margin-top: 10px;
        }

        .referral-structure {
            margin-top: 20px;
        }

        .structure-title {
            font-weight: bold;
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
        }

        .structure-item {
            background: white;
            border-radius: 8px;
            padding: 12px;
            margin-bottom: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: var(--primary-color);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
        }

        .user-name {
            font-weight: 500;
        }

        .user-status {
            font-size: 12px;
            padding: 3px 8px;
            border-radius: 4px;
        }

        .status-active {
            background: var(--success-color);
            color: white;
        }

        .status-inactive {
            background: #ddd;
            color: #666;
        }

        .user-earnings {
            font-weight: bold;
            color: var(--success-color);
        }

        .tabs {
            display: flex;
            border-radius: 8px;
            overflow: hidden;
            margin-bottom: 20px;
            border: 1px solid #ddd;
        }

        .tab {
            flex: 1;
            padding: 12px;
            text-align: center;
            background: white;
            cursor: pointer;
        }

        .tab.active {
            background: var(--primary-color);
            color: white;
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        .back-btn {
            position: absolute;
            top: 20px;
            left: 20px;
            padding: 10px 20px;
            background: var(--secondary-color);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 14px;
            cursor: pointer;
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: 5px;
            transition: background 0.3s ease;
            z-index: 1000;
        }

        .back-btn:hover {
            background: #9932CC;
        }

        .back-btn svg {
            width: 16px;
            height: 16px;
            fill: white;
        }

        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            color: white;
            flex-direction: column;
        }

        .spinner {
            width: 40px;
            height: 40px;
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: white;
            animation: spin 1s ease-in-out infinite;
            margin-bottom: 16px;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .empty-list {
            text-align: center;
            color: #666;
            padding: 20px;
        }
    </style>
</head>
<body>
    <a href="javascript:history.back()" class="back-btn">
        <svg viewBox="0 0 24 24">
            <path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z"/>
        </svg>
        Назад
    </a>
    
    <div class="container">
        <div class="card">
            <div class="referral-header">
                <h2>Реферальная программа</h2>
                <p>Приглашайте друзей и получайте бонусы за их активность</p>
            </div>

            <div class="referral-stats">
                <div class="stat-card">
                    <div class="stat-value" id="totalReferrals">0</div>
                    <div class="stat-label">Всего рефералов</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="activeReferrals">0</div>
                    <div class="stat-label">Активных</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="totalEarned">0</div>
                    <div class="stat-label">Заработано</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="availableBalance">0</div>
                    <div class="stat-label">Доступно</div>
                </div>
            </div>

            <div class="referral-link-container">
                <h3>Ваша реферальная ссылка</h3>
                <div class="referral-link" id="userReferralLink"></div>
                <button class="copy-btn" id="copyReferralBtn">
                    <svg viewBox="0 0 24 24">
                        <path d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z"/>
                    </svg>
                    Копировать
                </button>
                <div class="bonus-info">
                    Вы получаете 5% от суммы каждого пополнения вашего реферала
                </div>
            </div>

            <div class="tabs">
                <div class="tab active" data-tab="structure">Моя структура</div>
                <div class="tab" data-tab="history">История начислений</div>
            </div>

            <div class="tab-content active" id="structure-tab">
                <div class="structure-title">
                    <span>Рефералы</span>
                    <span>Заработано</span>
                </div>
                <div id="referralList"></div>
            </div>

            <div class="tab-content" id="history-tab">
                <div class="structure-title">
                    <span>Начисления</span>
                    <span>Сумма</span>
                </div>
                <div id="earningsHistory"></div>
            </div>
        </div>
    </div>

    <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-database.js"></script>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    
    <script>
        // Инициализация Firebase
        const firebaseConfig = {
            databaseURL: "https://stars-207f2-default-rtdb.firebaseio.com/",
            apiKey: "rfIdLaULMIe2uo0h3pygEj3lNjAUWrkEOgsyhSD1nE8"
        };
        
        firebase.initializeApp(firebaseConfig);
        const database = firebase.database();
        
        // Инициализация Telegram WebApp
        const tg = window.Telegram.WebApp;
        if (tg) {
            tg.expand();
        }
        
        // Конфигурация
        const config = {
            referralBonusPercent: 5, // 5% от пополнений рефералов
            referralLossPercent: 30, // 30% от проигрышей рефералов
            minWithdrawal: 100, // Минимальная сумма для вывода
            baseUrl: window.location.href.split('?')[0]
        };
        
        // Основные переменные
        let currentUser = null;
        let userReferralCode = null;
        let userReferralLink = null;

        // Инициализация при загрузке страницы
        document.addEventListener('DOMContentLoaded', async () => {
            showLoading("Загрузка данных...");
            
            try {
                // Получаем данные пользователя Telegram
                const tgUser = tg?.initDataUnsafe?.user;
                if (tgUser) {
                    currentUser = await updateTelegramUser(tgUser);
                    await loadUserReferralData(tgUser.id.toString());
                    loadReferralStructure(tgUser.id.toString());
                    loadEarningsHistory(tgUser.id.toString());
                }
                
                initTabs();
                hideLoading();
            } catch (error) {
                console.error("Ошибка инициализации:", error);
                hideLoading();
                alert("Произошла ошибка при загрузке. Пожалуйста, попробуйте позже.");
            }
        });

        // Загрузка реферальных данных пользователя
        async function loadUserReferralData(userId) {
            const userRef = database.ref(`users/${userId}`);
            const snapshot = await userRef.once('value');
            
            if (snapshot.exists()) {
                const userData = snapshot.val();
                
                // Генерируем или получаем реферальный код пользователя
                if (userData.referralCode) {
                    userReferralCode = userData.referralCode;
                } else {
                    // Генерируем уникальный реферальный код
                    userReferralCode = 'REF' + Math.floor(1000 + Math.random() * 9000);
                    await userRef.update({ referralCode: userReferralCode });
                }
                
                // Создаем реферальную ссылку
                userReferralLink = `${config.baseUrl}?ref=${userReferralCode}`;
                document.getElementById('userReferralLink').textContent = userReferralLink;
                
                // Обновляем статистику
                if (userData.referralStats) {
                    document.getElementById('totalReferrals').textContent = userData.referralStats.totalReferrals || 0;
                    document.getElementById('activeReferrals').textContent = userData.referralStats.activeReferrals || 0;
                    document.getElementById('totalEarned').textContent = (userData.referralStats.totalEarned || 0) + ' ₽';
                    document.getElementById('availableBalance').textContent = (userData.referralStats.available || 0) + ' ₽';
                }
            }
        }

        // Загрузка структуры рефералов
        async function loadReferralStructure(userId) {
            const container = document.getElementById('referralList');
            container.innerHTML = '<p>Загрузка...</p>';
            
            const snapshot = await database.ref(`referrals/${userId}`).once('value');
            
            container.innerHTML = '';
            
            if (!snapshot.exists()) {
                container.innerHTML = '<div class="empty-list">У вас пока нет рефералов</div>';
                return;
            }
            
            const referrals = [];
            snapshot.forEach(child => {
                referrals.push({
                    id: child.key,
                    ...child.val()
                });
            });
            
            if (referrals.length === 0) {
                container.innerHTML = '<div class="empty-list">У вас пока нет рефералов</div>';
                return;
            }
            
            // Загружаем данные о каждом реферале
            const usersRef = database.ref('users');
            const usersSnapshot = await usersRef.once('value');
            const allUsers = [];
            usersSnapshot.forEach(child => {
                allUsers.push({
                    id: child.key,
                    ...child.val()
                });
            });
            
            referrals.forEach(ref => {
                const user = allUsers.find(u => u.id === ref.userId);
                if (user) {
                    const element = createReferralElement(user, ref);
                    container.appendChild(element);
                }
            });
        }

        // Создание элемента реферала
        function createReferralElement(user, refData) {
            const el = document.createElement('div');
            el.className = 'structure-item';
            
            const firstLetter = user.username ? user.username.charAt(0).toUpperCase() : 'U';
            const statusClass = refData.lastActivity > Date.now() - 30*24*60*60*1000 ? 'status-active' : 'status-inactive';
            const statusText = refData.lastActivity > Date.now() - 30*24*60*60*1000 ? 'Активен' : 'Неактивен';
            
            el.innerHTML = `
                <div class="user-info">
                    <div class="user-avatar">${firstLetter}</div>
                    <div>
                        <div class="user-name">${user.username || 'Аноним'}</div>
                        <div class="user-status ${statusClass}">${statusText}</div>
                    </div>
                </div>
                <div class="user-earnings">+${refData.bonus || 0} ₽</div>
            `;
            
            return el;
        }

        // Загрузка истории начислений
        async function loadEarningsHistory(userId) {
            const container = document.getElementById('earningsHistory');
            container.innerHTML = '<p>Загрузка...</p>';
            
            const snapshot = await database.ref(`referralEarnings/${userId}`).orderByChild('timestamp').limitToLast(20).once('value');
            
            container.innerHTML = '';
            
            if (!snapshot.exists()) {
                container.innerHTML = '<div class="empty-list">Нет данных о начислениях</div>';
                return;
            }
            
            const earnings = [];
            snapshot.forEach(child => {
                earnings.push({
                    id: child.key,
                    ...child.val()
                });
            });
            
            if (earnings.length === 0) {
                container.innerHTML = '<div class="empty-list">Нет данных о начислениях</div>';
                return;
            }
            
            // Сортируем по дате (новые сверху)
            earnings.sort((a, b) => b.timestamp - a.timestamp);
            
            earnings.forEach(earning => {
                const element = createEarningElement(earning);
                container.appendChild(element);
            });
        }

        // Создание элемента начисления
        function createEarningElement(earning) {
            const el = document.createElement('div');
            el.className = 'structure-item';
            
            const date = new Date(earning.timestamp).toLocaleDateString('ru-RU');
            let description = '';
            
            if (earning.type === 'deposit') {
                description = `Пополнение реферала ${earning.referralName || ''}`;
            } else if (earning.type === 'loss') {
                description = `Комиссия с проигрыша ${earning.referralName || ''}`;
            } else {
                description = 'Реферальное начисление';
            }
            
            el.innerHTML = `
                <div>
                    <div>${description}</div>
                    <div style="font-size: 12px; color: #666;">${date}</div>
                </div>
                <div class="user-earnings">+${earning.amount} ₽</div>
            `;
            
            return el;
        }

        // Инициализация вкладок
        function initTabs() {
            document.querySelectorAll('.tab').forEach(tab => {
                tab.addEventListener('click', function() {
                    document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
                    this.classList.add('active');
                    
                    const tabId = this.dataset.tab;
                    document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
                    document.getElementById(`${tabId}-tab`).classList.add('active');
                });
            });
            
            // Копирование реферальной ссылки
            document.getElementById('copyReferralBtn').addEventListener('click', copyReferralLink);
        }
        
        // Копирование реферальной ссылки
        function copyReferralLink() {
            navigator.clipboard.writeText(userReferralLink)
                .then(() => {
                    const btn = document.getElementById('copyReferralBtn');
                    btn.innerHTML = `
                        <svg viewBox="0 0 24 24">
                            <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z"/>
                        </svg>
                        Скопировано!
                    `;
                    setTimeout(() => {
                        btn.innerHTML = `
                            <svg viewBox="0 0 24 24">
                                <path d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z"/>
                            </svg>
                            Копировать
                        `;
                    }, 2000);
                })
                .catch(err => {
                    console.error('Ошибка копирования: ', err);
                    alert('Не удалось скопировать ссылку');
                });
        }

        // Обновление данных пользователя
        async function updateTelegramUser(tgUser) {
            if (!tgUser?.id) return;
            
            const userId = tgUser.id.toString();
            const userRef = database.ref(`users/${userId}`);
            const snapshot = await userRef.once('value');
            
            const userData = {
                id: userId,
                username: tgUser.username || '',
                first_name: tgUser.first_name || '',
                last_name: tgUser.last_name || '',
                last_active: firebase.database.ServerValue.TIMESTAMP
            };
            
            if (!snapshot.exists()) {
                userData.created_at = firebase.database.ServerValue.TIMESTAMP;
                userData.balance = 0;
                userData.referralStats = {
                    totalReferrals: 0,
                    activeReferrals: 0,
                    totalEarned: 0,
                    available: 0
                };
                await userRef.set(userData);
            } else {
                await userRef.update(userData);
            }
            
            return { key: userId, ref: userRef };
        }

        // Показать загрузку
        function showLoading(message) {
            let overlay = document.querySelector('.loading-overlay');
            
            if (!overlay) {
                overlay = document.createElement('div');
                overlay.className = 'loading-overlay';
                overlay.innerHTML = `
                    <div class="spinner"></div>
                    <div>${message || 'Загрузка...'}</div>
                `;
                document.body.appendChild(overlay);
            } else {
                overlay.querySelector('div:last-child').textContent = message || 'Загрузка...';
            }
        }

        // Скрыть загрузку
        function hideLoading() {
            const overlay = document.querySelector('.loading-overlay');
            if (overlay) {
                overlay.remove();
            }
        }
    </script>
</body>
</html>
