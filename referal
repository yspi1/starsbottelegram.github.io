<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Космический профиль</title>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-database-compat.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #6a4cff;
            --neon-color: #00e0ff;
            --text-color: #ffffff;
            --bg-color: #0f0f1a;
            --button-bg: rgba(30, 30, 46, 0.7);
            --button-hover: rgba(106, 76, 255, 0.3);
            --menu-bg: rgba(15, 15, 26, 0.95);
            --menu-border: #6a4cff;
            --danger: #ff4d6d;
            --success: #00e676;
            --card-bg: rgba(30, 30, 46, 0.8);
        }
        
        body {
            font-family: 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
            margin: 0;
            padding: 0;
            overflow-x: hidden;
            color: var(--text-color);
            display: flex;
            flex-direction: column;
            align-items: center;
            min-height: 100vh;
            background: var(--bg-color);
            background-image: 
                radial-gradient(circle at 20% 30%, rgba(106, 76, 255, 0.15) 0%, transparent 30%),
                radial-gradient(circle at 80% 70%, rgba(255, 107, 157, 0.15) 0%, transparent 30%);
            touch-action: pan-y;
            overscroll-behavior-y: contain;
        }

        /* Меню и другие стили остаются без изменений */
        /* ... (остальные стили из вашего профиля) ... */

        /* Новые стили для реферальной системы */
        .referral-stats {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 10px;
            margin: 15px 0;
        }

        .referral-link-container {
            background: rgba(106, 76, 255, 0.1);
            border-radius: 12px;
            padding: 15px;
            margin: 15px 0;
            text-align: center;
        }

        .referral-link {
            font-weight: bold;
            word-break: break-all;
            margin: 10px 0;
            color: var(--neon-color);
        }

        .copy-btn {
            background: var(--primary-color);
            color: white;
            border: none;
            border-radius: 8px;
            padding: 8px 15px;
            cursor: pointer;
            transition: background 0.3s;
        }

        .copy-btn:hover {
            background: var(--neon-color);
        }

        .tabs {
            display: flex;
            border-radius: 8px;
            overflow: hidden;
            margin: 15px 0;
        }

        .tab {
            flex: 1;
            padding: 10px;
            text-align: center;
            background: var(--button-bg);
            cursor: pointer;
            transition: all 0.3s;
        }

        .tab.active {
            background: var(--primary-color);
        }

        .structure-title {
            display: flex;
            justify-content: space-between;
            padding: 10px 0;
            font-weight: bold;
        }

        .structure-item {
            background: var(--card-bg);
            border-radius: 8px;
            padding: 12px;
            margin: 8px 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .user-avatar {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            background: var(--primary-color);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
        }

        .user-earnings {
            color: var(--success);
            font-weight: bold;
        }

        .bonus-info {
            font-size: 14px;
            color: rgba(255, 255, 255, 0.7);
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <!-- Иконка меню -->
    <div class="menu-icon" onclick="toggleMenu()">
        <i class="fas fa-bars"></i>
    </div>

    <!-- Выпадающее меню -->
    <div class="menu" id="menu">
        <button class="menu-item" onclick="window.location.href='games.html'">
            <i class="fas fa-gamepad"></i> Игры
        </button>
        <div class="menu-divider"></div>
        <button class="menu-item" onclick="window.location.href='replenishment.html'">
            <i class="fas fa-wallet"></i> Пополнение
        </button>
        <button class="menu-item" onclick="window.location.href='conclusion.html'">
            <i class="fas fa-money-bill-wave"></i> Вывод
        </button>
        <button class="menu-item exchanger" onclick="window.location.href='Exchanger.html'">
            <i class="fas fa-exchange-alt"></i> Обменник
        </button>
        <div class="menu-divider"></div>
        <button class="menu-item" onclick="window.location.href='support.html'">
            <i class="fas fa-headset"></i> Поддержка
        </button>
    </div>

    <!-- Уведомление -->
    <div class="notification" id="notification" style="display: none;">
        <i class="fas fa-check-circle notification-icon"></i>
        <span id="notification-message">Сообщение</span>
    </div>

    <!-- Звездный фон -->
    <div class="stars" id="stars-container"></div>

    <!-- Основной контент -->
    <div class="main-container" id="profileContainer">
        <div class="profile-card">
            <h1 class="profile-title">КОСМИЧЕСКИЙ ПРОФИЛЬ</h1>
            
            <div class="avatar-container">
                <img id="avatar" src="" alt="Аватар" class="avatar">
            </div>
            
            <h2 class="username" id="username">Загрузка...</h2>
            
            <div class="balance-container">
                <div class="balance-label">Ваш баланс</div>
                <div class="balance-value" id="balance">0 ⭐️</div>
            </div>
            
            <!-- Реферальная система -->
            <div class="referral-section">
                <h2 class="profile-title">РЕФЕРАЛЬНАЯ СИСТЕМА</h2>
                
                <div class="referral-stats">
                    <div class="stat-card">
                        <div class="stat-value" id="totalReferrals">0</div>
                        <div class="stat-label">Всего рефералов</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="activeReferrals">0</div>
                        <div class="stat-label">Активных</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="totalEarned">0 ⭐️</div>
                        <div class="stat-label">Заработано</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="availableBalance">0 ⭐️</div>
                        <div class="stat-label">Доступно</div>
                    </div>
                </div>

                <div class="referral-link-container">
                    <h3>Ваша реферальная ссылка</h3>
                    <div class="referral-link" id="userReferralLink"></div>
                    <button class="copy-btn" onclick="copyReferralLink()">
                        <i class="fas fa-copy"></i> Копировать
                    </button>
                    <div class="bonus-info">
                        Вы получаете 5% от суммы каждого пополнения вашего реферала
                    </div>
                </div>

                <div class="tabs">
                    <div class="tab active" data-tab="structure">Моя структура</div>
                    <div class="tab" data-tab="history">История начислений</div>
                </div>

                <div class="tab-content active" id="structure-tab">
                    <div class="structure-title">
                        <span>Рефералы</span>
                        <span>Заработано</span>
                    </div>
                    <div id="referralList"></div>
                </div>

                <div class="tab-content" id="history-tab">
                    <div class="structure-title">
                        <span>Начисления</span>
                        <span>Сумма</span>
                    </div>
                    <div id="earningsHistory"></div>
                </div>
            </div>
            
            <!-- Промокод -->
            <div class="promo-section">
                <h3 class="promo-title">Промокод</h3>
                <div class="promo-input-container">
                    <input type="text" id="promoCodeInput" class="promo-input" placeholder="Введите промокод">
                    <button class="promo-apply-btn" onclick="applyPromoCode()">
                        <i class="fas fa-check"></i>
                    </button>
                </div>
                <div class="bonus-info">
                    Ваш промокод: <span id="userPromoCode"></span> - дает 5% от пополнений
                </div>
            </div>
        </div>
    </div>

    <script>
        // Конфигурация Firebase
        const firebaseConfig = {
            apiKey: "rfIdLaULMIe2uo0h3pygEj3lNjAUWrkEOgsyhSD1nE8",
            databaseURL: "https://stars-207f2-default-rtdb.firebaseio.com"
        };

        // Инициализация Firebase
        firebase.initializeApp(firebaseConfig);
        const database = firebase.database();

        // Основные элементы
        const elements = {
            avatar: document.getElementById('avatar'),
            username: document.getElementById('username'),
            balance: document.getElementById('balance'),
            totalReferrals: document.getElementById('totalReferrals'),
            activeReferrals: document.getElementById('activeReferrals'),
            totalEarned: document.getElementById('totalEarned'),
            availableBalance: document.getElementById('availableBalance'),
            userReferralLink: document.getElementById('userReferralLink'),
            referralList: document.getElementById('referralList'),
            earningsHistory: document.getElementById('earningsHistory'),
            promoCodeInput: document.getElementById('promoCodeInput'),
            userPromoCode: document.getElementById('userPromoCode'),
            notification: document.getElementById('notification'),
            notificationMessage: document.getElementById('notification-message')
        };

        // Данные пользователя
        let userData = {
            userId: null,
            name: "Гость",
            avatar: "https://via.placeholder.com/150/6a5acd/ffffff?text=USER",
            balance: 0,
            registrationDate: new Date().toISOString(),
            referralCode: null,
            referredBy: null,
            myPromoCode: null,
            usedPromoCodes: [],
            referralStats: {
                totalReferrals: 0,
                activeReferrals: 0,
                totalEarned: 0,
                available: 0
            }
        };

        // Ссылка на данные пользователя в Firebase
        let userRef;
        let unsubscribeAuth;

        // Инициализация при загрузке
        document.addEventListener('DOMContentLoaded', function() {
            createStars();
            initApp();
        });

        // Основная функция инициализации
        async function initApp() {
            if (window.Telegram && Telegram.WebApp) {
                Telegram.WebApp.expand();
                Telegram.WebApp.enableClosingConfirmation();
                
                if (Telegram.WebApp.initDataUnsafe?.user) {
                    await handleLogin();
                }
            }
        }

        // Обработка входа через Telegram
        async function handleLogin() {
            try {
                const tgUser = Telegram.WebApp.initDataUnsafe.user;
                userData.userId = tgUser.id.toString();
                
                // Инициализация ссылки на данные пользователя
                userRef = database.ref('users/' + userData.userId);
                
                // Проверяем существование пользователя
                const snapshot = await userRef.once('value');
                
                if (!snapshot.exists()) {
                    await createNewUser();
                } else {
                    userData = {...userData, ...snapshot.val()};
                    // Инициализируем referralStats, если их нет
                    if (!userData.referralStats) {
                        userData.referralStats = {
                            totalReferrals: 0,
                            activeReferrals: 0,
                            totalEarned: 0,
                            available: 0
                        };
                        await userRef.update({ referralStats: userData.referralStats });
                    }
                }
                
                // Настраиваем слушатель изменений в реальном времени
                setupRealtimeUpdates();
                
                // Обрабатываем реферальную ссылку
                await processReferralLink();
                
                // Обрабатываем промокод из URL
                await processPromoCode();
                
                updateUI();
            } catch (error) {
                console.error("Ошибка входа:", error);
                showNotification("Ошибка входа. Попробуйте снова.", "error");
            }
        }

        // Создание нового пользователя
        async function createNewUser() {
            userData.name = Telegram.WebApp.initDataUnsafe.user.first_name || 
                           Telegram.WebApp.initDataUnsafe.user.username || 
                           "Космонавт";
            userData.avatar = Telegram.WebApp.initDataUnsafe.user.photo_url || 
                            `https://via.placeholder.com/150/6a5acd/ffffff?text=${userData.name.charAt(0)}`;
            
            // Генерируем реферальный код и промокод
            userData.referralCode = generateReferralCode();
            userData.myPromoCode = generatePromoCode();
            
            await userRef.set(userData);
            showNotification("Новый профиль создан!", "success");
        }

        // Генерация реферального кода
        function generateReferralCode() {
            return 'REF-' + Math.random().toString(36).substr(2, 6).toUpperCase();
        }

        // Генерация промокода
        function generatePromoCode() {
            return 'PROMO-' + Math.random().toString(36).substr(2, 8).toUpperCase();
        }

        // Обработка реферальной ссылки
        async function processReferralLink() {
            const urlParams = new URLSearchParams(window.location.search);
            const referralCode = urlParams.get('ref');
            
            if (referralCode && !userData.referredBy) {
                const referrerSnapshot = await database.ref('users')
                    .orderByChild('referralCode')
                    .equalTo(referralCode)
                    .once('value');
                
                if (referrerSnapshot.exists()) {
                    const [referrerId, referrerData] = Object.entries(referrerSnapshot.val())[0];
                    userData.referredBy = referrerId;
                    
                    // Обновляем статистику реферера
                    await database.ref(`users/${referrerId}/referralStats`).update({
                        totalReferrals: firebase.database.ServerValue.increment(1),
                        activeReferrals: firebase.database.ServerValue.increment(1)
                    });
                    
                    // Добавляем реферала в структуру
                    await database.ref(`referrals/${referrerId}`).push().set({
                        userId: userData.userId,
                        name: userData.name,
                        date: Date.now(),
                        earnings: 0,
                        lastActivity: Date.now()
                    });
                    
                    // Обновляем данные пользователя
                    await userRef.update({
                        referredBy: referrerId
                    });
                    
                    showNotification("Вы успешно зарегистрировались по реферальной ссылке!", "success");
                }
            }
        }

        // Обработка промокода из URL
        async function processPromoCode() {
            const urlParams = new URLSearchParams(window.location.search);
            const promoCode = urlParams.get('promo');
            
            if (promoCode && (!userData.usedPromoCodes || !userData.usedPromoCodes.includes(promoCode))) {
                await applyPromoCode(promoCode);
            }
        }

        // Применение промокода
        async function applyPromoCode(code = null) {
            try {
                const promoCode = code || elements.promoCodeInput.value.trim();
                
                if (!promoCode) {
                    showNotification("Введите промокод", "warning");
                    return;
                }
                
                if (userData.usedPromoCodes?.includes(promoCode)) {
                    showNotification("Вы уже использовали этот промокод", "warning");
                    return;
                }
                
                // Проверяем, не пытается ли пользователь использовать свой промокод
                if (promoCode === userData.myPromoCode) {
                    showNotification("Нельзя использовать собственный промокод", "warning");
                    return;
                }
                
                // Ищем пользователя с таким промокодом
                const promoUserSnapshot = await database.ref('users')
                    .orderByChild('myPromoCode')
                    .equalTo(promoCode)
                    .once('value');
                
                if (!promoUserSnapshot.exists()) {
                    showNotification("Промокод не найден", "error");
                    return;
                }
                
                const [promoUserId, promoUserData] = Object.entries(promoUserSnapshot.val())[0];
                
                // Добавляем промокод в список использованных
                await userRef.update({
                    usedPromoCodes: firebase.database.ServerValue.arrayUnion(promoCode)
                });
                
                // Обновляем локальные данные
                if (!userData.usedPromoCodes) userData.usedPromoCodes = [];
                userData.usedPromoCodes.push(promoCode);
                
                showNotification("Промокод успешно активирован! 5% от ваших пополнений будет идти владельцу промокода.", "success");
                elements.promoCodeInput.value = "";
            } catch (error) {
                console.error("Ошибка применения промокода:", error);
                showNotification("Ошибка при применении промокода", "error");
            }
        }

        // Настройка синхронизации в реальном времени
        function setupRealtimeUpdates() {
            if (unsubscribeAuth) {
                unsubscribeAuth(); // Отписываемся от предыдущего слушателя
            }
            
            unsubscribeAuth = userRef.on('value', (snapshot) => {
                const dbData = snapshot.val();
                if (dbData) {
                    // Обновляем только измененные поля
                    Object.keys(dbData).forEach(key => {
                        if (userData[key] !== dbData[key]) {
                            userData[key] = dbData[key];
                        }
                    });
                    updateUI();
                }
            }, (error) => {
                console.error("Ошибка синхронизации:", error);
                showNotification("Ошибка соединения с сервером", "error");
            });
        }

        // Обновление интерфейса
        function updateUI() {
            elements.avatar.src = userData.avatar;
            elements.username.textContent = userData.name;
            elements.balance.textContent = `${userData.balance} ⭐️`;
            
            // Реферальная система
            elements.totalReferrals.textContent = userData.referralStats?.totalReferrals || 0;
            elements.activeReferrals.textContent = userData.referralStats?.activeReferrals || 0;
            elements.totalEarned.textContent = `${userData.referralStats?.totalEarned || 0} ⭐️`;
            elements.availableBalance.textContent = `${userData.referralStats?.available || 0} ⭐️`;
            elements.userReferralLink.textContent = `${window.location.href.split('?')[0]}?ref=${userData.referralCode}`;
            
            // Промокод
            elements.userPromoCode.textContent = userData.myPromoCode || "Генерация...";
            
            // Загружаем структуру рефералов и историю начислений
            loadReferralStructure();
            loadEarningsHistory();
        }

        // Загрузка структуры рефералов
        async function loadReferralStructure() {
            if (!userData.userId) return;
            
            const snapshot = await database.ref(`referrals/${userData.userId}`).once('value');
            const container = document.getElementById('referralList');
            container.innerHTML = '';
            
            if (!snapshot.exists()) {
                container.innerHTML = '<div style="text-align: center; color: rgba(255,255,255,0.7); padding: 20px;">У вас пока нет рефералов</div>';
                return;
            }
            
            const referrals = [];
            snapshot.forEach(child => {
                referrals.push({
                    id: child.key,
                    ...child.val()
                });
            });
            
            if (referrals.length === 0) {
                container.innerHTML = '<div style="text-align: center; color: rgba(255,255,255,0.7); padding: 20px;">У вас пока нет рефералов</div>';
                return;
            }
            
            referrals.forEach(ref => {
                const el = document.createElement('div');
                el.className = 'structure-item';
                
                const firstLetter = ref.name?.charAt(0) || 'U';
                const isActive = ref.lastActivity > Date.now() - 30*24*60*60*1000;
                
                el.innerHTML = `
                    <div style="display: flex; align-items: center; gap: 10px;">
                        <div class="user-avatar">${firstLetter}</div>
                        <div>
                            <div>${ref.name || 'Анонимный пользователь'}</div>
                            <div style="font-size: 12px; color: ${isActive ? var(--success) : '#666'}">
                                ${isActive ? 'Активен' : 'Неактивен'}
                            </div>
                        </div>
                    </div>
                    <div class="user-earnings">+${ref.earnings || 0} ⭐️</div>
                `;
                container.appendChild(el);
            });
        }

        // Загрузка истории начислений
        async function loadEarningsHistory() {
            if (!userData.userId) return;
            
            const snapshot = await database.ref(`referralEarnings/${userData.userId}`).orderByChild('timestamp').limitToLast(20).once('value');
            const container = document.getElementById('earningsHistory');
            container.innerHTML = '';
            
            if (!snapshot.exists()) {
                container.innerHTML = '<div style="text-align: center; color: rgba(255,255,255,0.7); padding: 20px;">Нет данных о начислениях</div>';
                return;
            }
            
            const earnings = [];
            snapshot.forEach(child => {
                earnings.push({
                    id: child.key,
                    ...child.val()
                });
            });
            
            if (earnings.length === 0) {
                container.innerHTML = '<div style="text-align: center; color: rgba(255,255,255,0.7); padding: 20px;">Нет данных о начислениях</div>';
                return;
            }
            
            // Сортируем по дате (новые сверху)
            earnings.sort((a, b) => b.timestamp - a.timestamp);
            
            earnings.forEach(earning => {
                const el = document.createElement('div');
                el.className = 'structure-item';
                
                const date = new Date(earning.timestamp).toLocaleDateString('ru-RU');
                let description = '';
                
                if (earning.type === 'deposit') {
                    description = `Пополнение реферала ${earning.referralName || ''}`;
                } else if (earning.type === 'loss') {
                    description = `Комиссия с проигрыша ${earning.referralName || ''}`;
                } else if (earning.type === 'promo') {
                    description = `Бонус по промокоду ${earning.promoCode || ''}`;
                } else {
                    description = 'Реферальное начисление';
                }
                
                el.innerHTML = `
                    <div>
                        <div>${description}</div>
                        <div style="font-size: 12px; color: rgba(255,255,255,0.7);">${date}</div>
                    </div>
                    <div class="user-earnings">+${earning.amount} ⭐️</div>
                `;
                container.appendChild(el);
            });
        }

        // Копирование реферальной ссылки
        function copyReferralLink() {
            navigator.clipboard.writeText(elements.userReferralLink.textContent)
                .then(() => {
                    showNotification('Реферальная ссылка скопирована!', 'success');
                })
                .catch(err => {
                    console.error('Ошибка копирования: ', err);
                    showNotification('Не удалось скопировать ссылку', 'error');
                });
        }

        // Инициализация вкладок
        function initTabs() {
            document.querySelectorAll('.tab').forEach(tab => {
                tab.addEventListener('click', function() {
                    document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
                    this.classList.add('active');
                    
                    const tabId = this.dataset.tab;
                    document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
                    document.getElementById(`${tabId}-tab`).classList.add('active');
                });
            });
        }

        // Функция для обработки пополнения баланса с учетом рефералов и промокодов
        async function handleDeposit(userId, amount) {
            try {
                // Обновляем баланс пользователя
                await database.ref(`users/${userId}/balance`).transaction(balance => {
                    return (balance || 0) + amount;
                });
                
                // Получаем данные пользователя
                const userSnapshot = await database.ref(`users/${userId}`).once('value');
                const user = userSnapshot.val();
                
                // Если пользователь пришел по реферальной ссылке
                if (user.referredBy) {
                    const referralBonus = amount * 0.05; // 5% от пополнения
                    
                    // Начисляем бонус рефереру
                    await database.ref(`users/${user.referredBy}`).transaction(data => {
                        if (!data) return data;
                        
                        // Обновляем баланс и статистику
                        data.balance = (data.balance || 0) + referralBonus;
                        data.referralStats = data.referralStats || {
                            totalReferrals: 0,
                            activeReferrals: 0,
                            totalEarned: 0,
                            available: 0
                        };
                        
                        data.referralStats.totalEarned = (data.referralStats.totalEarned || 0) + referralBonus;
                        data.referralStats.available = (data.referralStats.available || 0) + referralBonus;
                        
                        return data;
                    });
                    
                    // Добавляем запись в историю начислений реферера
                    await database.ref(`referralEarnings/${user.referredBy}`).push().set({
                        amount: referralBonus,
                        timestamp: Date.now(),
                        type: 'deposit',
                        referralId: userId,
                        referralName: user.name
                    });
                    
                    // Обновляем структуру рефералов
                    const referralsRef = database.ref(`referrals/${user.referredBy}`);
                    const referralsSnapshot = await referralsRef.orderByChild('userId').equalTo(userId).once('value');
                    
                    if (referralsSnapshot.exists()) {
                        referralsSnapshot.forEach(child => {
                            child.ref.update({
                                earnings: (child.val().earnings || 0) + referralBonus,
                                lastActivity: Date.now()
                            });
                        });
                    }
                }
                
                // Обработка промокодов
                if (user.usedPromoCodes?.length > 0) {
                    const promoBonus = amount * 0.05; // 5% от пополнения
                    
                    // Для каждого использованного промокода находим владельца и начисляем бонус
                    for (const promoCode of user.usedPromoCodes) {
                        const promoUserSnapshot = await database.ref('users')
                            .orderByChild('myPromoCode')
                            .equalTo(promoCode)
                            .once('value');
                        
                        if (promoUserSnapshot.exists()) {
                            const [promoUserId, promoUserData] = Object.entries(promoUserSnapshot.val())[0];
                            
                            // Начисляем бонус владельцу промокода
                            await database.ref(`users/${promoUserId}`).transaction(data => {
                                if (!data) return data;
                                
                                data.balance = (data.balance || 0) + promoBonus;
                                return data;
                            });
                            
                            // Добавляем запись в историю начислений
                            await database.ref(`referralEarnings/${promoUserId}`).push().set({
                                amount: promoBonus,
                                timestamp: Date.now(),
                                type: 'promo',
                                promoCode: promoCode,
                                userId: userId,
                                userName: user.name
                            });
                        }
                    }
                }
                
                return true;
            } catch (error) {
                console.error("Ошибка обработки пополнения:", error);
                return false;
            }
        }

        // Функция для обработки проигрыша с учетом рефералов
        async function handleLoss(userId, amount) {
            try {
                // Получаем данные пользователя
                const userSnapshot = await database.ref(`users/${userId}`).once('value');
                const user = userSnapshot.val();
                
                // Если пользователь пришел по реферальной ссылке
                if (user.referredBy) {
                    const referralBonus = amount * 0.30; // 30% от проигрыша
                    
                    // Начисляем бонус рефереру
                    await database.ref(`users/${user.referredBy}`).transaction(data => {
                        if (!data) return data;
                        
                        // Обновляем баланс и статистику
                        data.balance = (data.balance || 0) + referralBonus;
                        data.referralStats = data.referralStats || {
                            totalReferrals: 0,
                            activeReferrals: 0,
                            totalEarned: 0,
                            available: 0
                        };
                        
                        data.referralStats.totalEarned = (data.referralStats.totalEarned || 0) + referralBonus;
                        data.referralStats.available = (data.referralStats.available || 0) + referralBonus;
                        
                        return data;
                    });
                    
                    // Добавляем запись в историю начислений реферера
                    await database.ref(`referralEarnings/${user.referredBy}`).push().set({
                        amount: referralBonus,
                        timestamp: Date.now(),
                        type: 'loss',
                        referralId: userId,
                        referralName: user.name
                    });
                    
                    // Обновляем структуру рефералов
                    const referralsRef = database.ref(`referrals/${user.referredBy}`);
                    const referralsSnapshot = await referralsRef.orderByChild('userId').equalTo(userId).once('value');
                    
                    if (referralsSnapshot.exists()) {
                        referralsSnapshot.forEach(child => {
                            child.ref.update({
                                earnings: (child.val().earnings || 0) + referralBonus,
                                lastActivity: Date.now()
                            });
                        });
                    }
                }
                
                return true;
            } catch (error) {
                console.error("Ошибка обработки проигрыша:", error);
                return false;
            }
        }

        // Показать уведомление
        function showNotification(message, type = 'success', duration = 3000) {
            const notification = document.getElementById('notification');
            const notificationMsg = document.getElementById('notification-message');
            const notificationIcon = document.querySelector('.notification-icon');
            
            notification.className = 'notification';
            notification.classList.add(`notification-${type}`);
            
            // Устанавливаем иконку в зависимости от типа
            switch(type) {
                case 'success':
                    notificationIcon.className = 'fas fa-check-circle notification-icon';
                    break;
                case 'error':
                    notificationIcon.className = 'fas fa-times-circle notification-icon';
                    break;
                case 'warning':
                    notificationIcon.className = 'fas fa-exclamation-circle notification-icon';
                    break;
                default:
                    notificationIcon.className = 'fas fa-info-circle notification-icon';
            }
            
            notificationMsg.textContent = message;
            notification.style.display = 'flex';
            
            // Скрываем уведомление через указанное время
            setTimeout(() => {
                notification.classList.add('hide');
                setTimeout(() => {
                    notification.style.display = 'none';
                    notification.classList.remove('hide');
                }, 300);
            }, duration);
        }

        // Создание звездного фона
        function createStars() {
            const container = document.getElementById('stars-container');
            const starCount = Math.floor(window.innerWidth / 2);
            
            for (let i = 0; i < starCount; i++) {
                const star = document.createElement('div');
                star.className = 'star';
                
                const size = Math.random() * 3;
                const duration = 2 + Math.random() * 8;
                const delay = Math.random() * 5;
                
                star.style.left = `${Math.random() * 100}%`;
                star.style.top = `${Math.random() * 100}%`;
                star.style.width = `${size}px`;
                star.style.height = `${size}px`;
                star.style.animationDuration = `${duration}s`;
                star.style.animationDelay = `${delay}s`;
                star.style.opacity = Math.random();
                
                container.appendChild(star);
                
                star.addEventListener('animationend', () => {
                    star.remove();
                    createStar();
                });
            }
        }

        function createStar() {
            const container = document.getElementById('stars-container');
            const star = document.createElement('div');
            star.className = 'star';
            
            const size = Math.random() * 3;
            const duration = 2 + Math.random() * 8;
            
            star.style.left = `${Math.random() * 100}%`;
            star.style.top = '-10px';
            star.style.width = `${size}px`;
            star.style.height = `${size}px`;
            star.style.animationDuration = `${duration}s`;
            star.style.opacity = Math.random();
            
            container.appendChild(star);
            
            star.addEventListener('animationend', () => {
                star.remove();
            });
        }

        // Функции меню
        function toggleMenu() {
            const menu = document.getElementById('menu');
            menu.style.display = menu.style.display === 'flex' ? 'none' : 'flex';
        }

        // Глобальные функции
        window.handleDeposit = handleDeposit;
        window.handleLoss = handleLoss;
        window.copyReferralLink = copyReferralLink;
        window.applyPromoCode = applyPromoCode;
        window.toggleMenu = toggleMenu;
    </script>
</body>
</html>
